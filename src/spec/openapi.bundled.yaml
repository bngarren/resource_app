openapi: 3.0.3
info:
  description: |
    This is for the Resource App server
  version: 1.0.1
  title: Resource App
  termsOfService: 'http://swagger.io/terms/'
tags:
  - name: Scan
    description: Scanning for resources and interactables
  - name: Resources
    description: Access to Resources
  - name: Users
    description: Operations for users
paths:
  /scan:
    post:
      summary: Performs the scan action for a user
      description: |
        A user (at a GPS location) scans and receives data about nearby resources and interactables
      tags:
        - Scan
      operationId: scan
      requestBody:
        required: true
        description: |
          A user position (latitude/longitude coordinates) is required to perform the scan.
          This should be in the form of a tuple: [latitude, longitude]

          A user property with user data is optional (a scan doesn't have to be performed by an app user per se)
        content:
          application/json:
            schema:
              type: object
              required:
                - userPosition
              properties:
                user:
                  type: object
                  required:
                    - uuid
                  properties:
                    uuid:
                      type: string
                userPosition:
                  $ref: '#/components/schemas/Coordinate'
      responses:
        '200':
          description: |
            A successful scan returns metadata and interactables.

            Metadata includes where the scan location occurred, timestamp, etc.

            Interactables can include resources, machines, etc. Each of which is an object
            that provides info on the position, distance from user, and whether the user can
            interact with it (i.e. is close enough to it)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResult'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/add:
    post:
      summary: Adds a new user
      description: |
        Given a uuid from authentication service, adds a new user (player) to the app and database
      tags:
        - Users
      operationId: addUser
      requestBody:
        description: |
          A user uuid is required to create a new user. This is obtained via the authentication service (Firebase auth). Thus, this part must be complete prior to hitting this endpoint.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - uuid
              properties:
                uuid:
                  type: string
      responses:
        '201':
          description: |
            The user was sucessfully created
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/users/{uuid}':
    get:
      summary: Gets a user
      description: |
        Given a uuid from authentication service, gets user (player) data from the database
      tags:
        - Users
      operationId: getUser
      parameters:
        - in: path
          name: uuid
          description: Uuid string of the user
          schema:
            type: string
          required: true
      responses:
        '200':
          description: |
            Successful retrieval of the user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/users/{uuid}/inventory':
    get:
      summary: Gets the user's inventory
      description: |
        Retrieves the user's inventory from the database
      tags:
        - Users
      operationId: getUserInventory
      parameters:
        - in: path
          name: uuid
          description: Uuid string of the user
          schema:
            type: string
          required: true
      responses:
        '200':
          description: |
            Successful retrieval of user inventory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInventory'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
servers:
  - url: 'https://virtserver.swaggerhub.com/BNGARREN_1/resource-app/1.0.1'
components:
  schemas:
    User:
      type: object
      description: |
        A user (player) of the app
      required:
        - uuid
      properties:
        uuid:
          type: string
    Coordinate:
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: number
        format: double
    Region:
      type: object
      description: |
        A Region representation for server/client. It may mirror the RegionModel and json schema used
        in the data access layer/ORM, but is separately defined here for the API.
      required:
        - id
        - h3Index
        - reset_date
      properties:
        id:
          type: integer
          readOnly: true
        h3Index:
          type: string
        reset_date:
          type: string
    Resource:
      type: object
      description: |
        A Resource representation for server/client. It may mirror the ResourceModel and json schema used
        in the data access layer/ORM, but is separately defined here for the API.
      required:
        - id
        - name
        - region_id
        - h3Index
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        region_id:
          type: number
        h3Index:
          type: string
    ScanResult:
      type: object
      required:
        - metadata
        - interactables
        - canInteractWith
        - scannedRegions
      properties:
        metadata:
          type: object
          properties:
            scannedLocation:
              $ref: '#/components/schemas/Coordinate'
            timestamp:
              type: string
        interactables:
          type: object
          description: |
            Each property of the interactables object should be a category (InteractableCategory)
          required:
            - resources
          properties:
            resources:
              type: array
              items:
                $ref: '#/components/schemas/ScannedResource'
        canInteractWith:
          type: object
          description: |
            The properties (categories) of canInteractWith must match the properties (categories) of the interactables object returned in ScanResult
          required:
            - resources
          properties:
            resources:
              description: 'An array of Resource id''s that satisfy the userCanInteract boolean, i.e. the user is close enough'
              type: array
              items:
                type: number
        scannedRegions:
          type: array
          items:
            $ref: '#/components/schemas/ScannedRegion'
    Interactable:
      type: object
      description: |
        An Interactable represents an object in the environment which a user can interact. 

        This could include a resource or equipment, for instance.

        An Interactable object describes:
          - The type of interactable (category)
          - Where it is located (latitude, longitude)
          - How far it is from the user (scan location)
          - Whether the user can interact with it (i.e. is the user within range?)
      required:
        - category
        - position
        - distanceFromUser
        - userCanInteract
      properties:
        category:
          $ref: '#/components/schemas/InteractableCategory'
        position:
          $ref: '#/components/schemas/Coordinate'
        distanceFromUser:
          type: integer
          minimum: 0
        userCanInteract:
          type: boolean
      discriminator:
        propertyName: category
        mapping:
          resources: ./ScannedResource.yaml
    InteractableCategory:
      type: string
      description: |
        Category of the Interactable:
          * `resources`
          * `equipment`
        **These categories should be used to index a scan result's interactables object and canInteractWith object**
      enum:
        - resources
        - equipment
    ScannedResource:
      description: |
        An array of ScannedResources is returned to the client after a successful scan operation.
        This object includes the properties of a Resource and additional information, e.g., the vertices of the hexagon for drawing.
      allOf:
        - $ref: '#/components/schemas/Interactable'
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            vertices:
              type: array
              items:
                type: array
                items:
                  type: number
    ScannedRegion:
      description: |
        An array of ScannedRegions is returned to the client after a successful scan operation.
        The ScannedRegion object contains properties of the Region in the scan area
      allOf:
        - $ref: '#/components/schemas/Region'
    UserInventory:
      type: object
      description: |
        A user inventory consists of items and metadata
      required:
        - metadata
        - items
      properties:
        metadata:
          type: object
          required:
            - updated_at
          properties:
            updated_at:
              type: string
        items:
          type: object
          required:
            - byId
            - allIds
          properties:
            byId:
              type: array
              items:
                $ref: '#/components/schemas/InventoryItem'
            allIds:
              type: array
              items:
                type: integer
    InventoryItem:
      type: object
      description: |
        An item in a user inventory
      required:
        - id
        - name
      properties:
        id:
          type: integer
        name:
          type: string
    ErrorResponse:
      type: object
      description: |
        Describes the shape of an Error response to the client. For example, the client should receive json
        containing `code` and `message` properties.
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  responses:
    400BadRequest:
      description: The request was invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    401NotAuthorized:
      description: Not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    422UnprocessableEntity:
      description: |
        The server understands the content type of the request entity, and
        the syntax of the request entity is correct, but it was unable to
        process the contained instructions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
